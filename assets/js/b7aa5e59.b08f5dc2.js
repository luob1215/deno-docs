"use strict";(self.webpackChunkdeno_docs=self.webpackChunkdeno_docs||[]).push([[1757],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(t),m=o,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},81884:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=t(87462),o=(t(67294),t(3905));const a={},i="Starting a new project",s={unversionedId:"manual/tools/init",id:"manual/tools/init",title:"Starting a new project",description:"Starting a new project with Deno has always been incredibly simple: you just",source:"@site/runtime/manual/tools/init.md",sourceDirName:"manual/tools",slug:"/manual/tools/init",permalink:"/deno-docs/runtime/manual/tools/init",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"runtimeGuideHome",previous:{title:"Code Formatter",permalink:"/deno-docs/runtime/manual/tools/formatter"},next:{title:"Jupyter Kernel for Deno",permalink:"/deno-docs/runtime/manual/tools/jupyter"}},c={},l=[],p={toc:l},u="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"starting-a-new-project"},"Starting a new project"),(0,o.kt)("p",null,"Starting a new project with Deno has always been incredibly simple: you just\nneed a single file to get going. No need for any configuration files, dependency\nmanifests, or build scripts."),(0,o.kt)("p",null,"Users coming from other ecosystems are often not used to this simplicity - they\noften look for a tool to scaffold out a basic project structure to get them\nstarted on the right path. ",(0,o.kt)("inlineCode",{parentName:"p"},"deno init")," subcommand scaffolds a basic Deno\nproject."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ deno init\n\u2705 Project initialized\nRun these commands to get started\n\n  // Run the program\n  deno run main.ts\n\n  // Run the program and watch for file changes\n  deno task dev\n\n  // Run the tests\n  deno test\n\n  // Run the benchmarks\n  deno bench\n\n$ deno run main.ts\nAdd 2 + 3 = 5\n\n$ deno test\nCheck file:///dev/main_test.ts\nrunning 1 test from main_test.ts\naddTest ... ok (6ms)\n\nok | 1 passed | 0 failed (29ms)\n")),(0,o.kt)("p",null,"This subcommand will create two files (",(0,o.kt)("inlineCode",{parentName:"p"},"main.ts")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"main_test.ts"),"). These\nfiles provide a basic example of how to write a Deno program and how to write\ntests for it. The ",(0,o.kt)("inlineCode",{parentName:"p"},"main.ts")," file exports a ",(0,o.kt)("inlineCode",{parentName:"p"},"add")," function that adds two numbers\ntogether and the ",(0,o.kt)("inlineCode",{parentName:"p"},"main_test.ts")," file contains a test for this function."),(0,o.kt)("p",null,"You can also specify an argument to ",(0,o.kt)("inlineCode",{parentName:"p"},"deno init")," to initialize a project in a\nspecific directory:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ deno init my_deno_project\n\u2705 Project initialized\n\nRun these commands to get started\n\n  cd my_deno_project\n\n  // Run the program\n  deno run main.ts\n\n  // Run the program and watch for file changes\n  deno task dev\n\n  // Run the tests\n  deno test\n\n  // Run the benchmarks\n  deno bench\n")))}d.isMDXComponent=!0}}]);